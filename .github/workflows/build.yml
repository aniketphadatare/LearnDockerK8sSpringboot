name: Build

on:
  push:
    branches: [ "**" ]

jobs:
  build-product-api-service:
    name: Build product-api-service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./product-api-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw verify

      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image
        run: |
          ./mvnw clean package spring-boot:build-image -DskipTests
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/product-api-service

  build-customer-api-service:
    name: Build customer-api-service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./customer_api_service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw verify

      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image
        run: |
          ./mvnw clean package spring-boot:build-image -DskipTests
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/customer_api_service

  build-api-gateway-service:
    name: Build api-gateway-service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-gateway-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw verify

      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image
        run: |
          ./mvnw clean package spring-boot:build-image -DskipTests
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway-service
    
  build-product-app-ui:
    name: Build product-app-ui
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name : build the application
        run : |
            sudo apt-get update
            npm install -g @angular/cli@8.3.1
            ng build --prod

      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image
        run: |
          ./docker build -t angular/product-app-ui .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway-service

